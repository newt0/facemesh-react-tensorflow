[{"/Users/newt0/dev/new/facemesh-react-tensorflow/src/reportWebVitals.js":"1","/Users/newt0/dev/new/facemesh-react-tensorflow/src/App.js":"2","/Users/newt0/dev/new/facemesh-react-tensorflow/src/index.js":"3"},{"size":364,"mtime":1609147005439,"results":"4","hashOfConfig":"5"},{"size":1696,"mtime":1609149510588,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1609147000511,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"123fime",{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/newt0/dev/new/facemesh-react-tensorflow/src/reportWebVitals.js",[],"/Users/newt0/dev/new/facemesh-react-tensorflow/src/App.js",["15"],"import { React, useRef } from \"react\";\nimport \"./App.css\";\nimport Webcam from \"react-webcam\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as facemesh from \"@tensorflow-models/facemesh\";\n\nfunction App() {\n  // setup references\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  // load facemesh\n  const runFacemesh = async () => {\n    const net = await facemesh.load({\n      inputResolution: { width: 640, height: 480 },\n      scale: 0.8,\n    });\n    setInterval(() => {\n      detect(net);\n    }, [100]); // run detect function every 100 milliseconds\n  };\n\n  // detect function\n  const detect = async (net) => {\n    if (\n      // checking the webcam is up and running, and we're receiving data\n      typeof webcamRef.current !== \"undefined\" &&\n      webcamRef.current !== null &&\n      webcamRef.current.video.readyState === 4\n    ) {\n      // get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.videoWidth;\n      const videoHeight = webcamRef.current.videoHeight;\n\n      // set video width\n      webcamRef.current.video.width = videoWidth;\n      webcamRef.current.video.height = videoHeight;\n\n      // set canvas width\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n\n      // make detections\n      const face = await net.estimateFaces(video);\n      console.log(face);\n\n      // get canvas context for drawing\n    }\n  };\n\n  runFacemesh();\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_header\">\n        <Webcam className=\"webcam\" ref={webcamRef} />\n        <canvas className=\"canvas\" ref={canvasRef} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/newt0/dev/new/facemesh-react-tensorflow/src/index.js",[],{"ruleId":"16","severity":1,"message":"17","line":4,"column":13,"nodeType":"18","messageId":"19","endLine":4,"endColumn":15},"no-unused-vars","'tf' is defined but never used.","Identifier","unusedVar"]